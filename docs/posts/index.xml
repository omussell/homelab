<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Homelab</title>
    <link>/homelab/posts/</link>
    <description>Recent content in Posts on Homelab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 08 Feb 2018 17:50:00 +0000</lastBuildDate>
    
	<atom:link href="/homelab/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Go programs using Bazel</title>
      <link>/homelab/posts/bazel/</link>
      <pubDate>Thu, 08 Feb 2018 17:50:00 +0000</pubDate>
      
      <guid>/homelab/posts/bazel/</guid>
      <description>Bazel is a build tool created by Google which operates similarly to their internal build tool, Blaze. It is primarily concerned with generating artifacts from compiled languages like C, C++, Go etc.
pkg install -y bazel
Bazel requires some files so that it knows what and where to build. As an example, we are going to compile a simple go program with no dependencies (literally print a single string to stdout).</description>
    </item>
    
    <item>
      <title>Application Packaging with fpm</title>
      <link>/homelab/posts/pkg-build/</link>
      <pubDate>Tue, 30 Jan 2018 21:52:35 +0000</pubDate>
      
      <guid>/homelab/posts/pkg-build/</guid>
      <description>Create a new tagged release on the git repository
git tag 1.4.0  Create a tarball of the git repository at the particular tag revision. Extracts a folder called app-1.4.0 which contains the contents of the repository at tag 1.4.0.
git archive --format=tar.gz --prefix=app-1.4.0/ -o ~/app-1.4.0.tar.gz 1.4.0  fpm The fpm ruby gem can be used to convert common package formats into other common package formats, like virtualenv&amp;rsquo;s into freebsd packages.</description>
    </item>
    
    <item>
      <title>Postgresql 10.1 with replication and WAL archiving</title>
      <link>/homelab/posts/pgsql10/</link>
      <pubDate>Thu, 25 Jan 2018 22:35:25 +0000</pubDate>
      
      <guid>/homelab/posts/pgsql10/</guid>
      <description>Postgresql 10.1 install pkg install -y postgresql10-server postgresql10-client sysrc postgresql_enable=YES service postgresql initdb service postgresql start  Postgresql 10.1 SCRAM Authentication su - postgres psql set password_encryption = &#39;scram-sha-256&#39;; create role app_db with password &#39;foo&#39;; select substring(rolpassword, 1, 14) from pg_authid where rolname = &#39;app_db&#39;;  Postgresql 10.1 using repmgr for database replication, WAL-G for WAL archiving, and minio for S3 compatible storage For this, I created two bhyve VMs to host postgresql and a jail on the host for minio</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>/homelab/posts/hugo/</link>
      <pubDate>Thu, 25 Jan 2018 22:31:45 +0000</pubDate>
      
      <guid>/homelab/posts/hugo/</guid>
      <description>Install hugo
# note &#39;hugo&#39; is not the right package. It is completely different and # will take a long time to download before you realise its the wrong thing. pkg install -y gohugo git  Run hugo in the directory to build the assets, which will be placed into the public directory.
Run hugo server --baseUrl=/ --port=1313 --appendPort=false
Note that the baseURL is /. This is because it wasn&amp;rsquo;t rendering the css at all when I used a server name or IP address.</description>
    </item>
    
    <item>
      <title>Buildbot</title>
      <link>/homelab/posts/buildbot/</link>
      <pubDate>Thu, 25 Jan 2018 22:19:58 +0000</pubDate>
      
      <guid>/homelab/posts/buildbot/</guid>
      <description>Install the buildbot master pkg install -y py36-buildbot py36-buildbot-www  You need to create the config files directory
buildbot create-master master cd ./master cp master.cfg.sample master.cfg buildbot start master (look at twistd.log if there are errors during startup)  Enable the services and start
sysrc buildbot_enable=&amp;quot;YES&amp;quot; sysrc buildbot_basedir=&amp;quot;/var/www/buildbot&amp;quot; service buildbot start  Access via a browser at http://$IP:8010/
If using the localworker for testing: pkg install -y py36-buildbot-worker
With postgres backend:</description>
    </item>
    
    <item>
      <title>Self-hosted git with Gogs</title>
      <link>/homelab/posts/gogs/</link>
      <pubDate>Thu, 25 Jan 2018 22:15:59 +0000</pubDate>
      
      <guid>/homelab/posts/gogs/</guid>
      <description>There is now a package for gogs so just
pkg install -y gogs sysrc gogs_enable=YES service gogs start  To compile
pkg install -y go git gcc pw useradd git -m su - git GOPATH=$HOME/go; export GOPATH echo &#39;GOPATH=$HOME/go; export GOPATH&#39; &amp;gt;&amp;gt; ~/.profile cc=gcc go get -u --tags sqlite github.com/gogits/gogs ln -s go/src/github.com/gogits/gogs gogs cd gogs CC=gcc go build --tags sqlite  Set up the config file
mkdir -p custom/conf vim custom/conf/app.</description>
    </item>
    
    <item>
      <title>Saltstack Install and Configuration</title>
      <link>/homelab/posts/saltstack/</link>
      <pubDate>Thu, 25 Jan 2018 21:59:48 +0000</pubDate>
      
      <guid>/homelab/posts/saltstack/</guid>
      <description>Install the salt package
pkg install -y py27-salt  Copy the sample files to create the master and/or minion configuration files
cp -v /usr/local/etc/salt/master{.sample,&amp;quot;&amp;quot;} cp -v /usr/local/etc/salt/minion{.sample,&amp;quot;&amp;quot;}  Set the master/minion services to start on boot
sysrc salt_master_enable=&amp;quot;YES&amp;quot; sysrc salt_minion_enable=&amp;quot;YES&amp;quot;  Salt expects state files to exist in the /srv/salt or /etc/salt directories which don&amp;rsquo;t exist by default on FreeBSD so make symlinks instead:
ln -s /usr/local/etc/salt /etc/salt ln -s /usr/local/etc/salt /srv/salt  Start the services</description>
    </item>
    
    <item>
      <title>NSD and Unbound Configuration</title>
      <link>/homelab/posts/nsd-unbound/</link>
      <pubDate>Thu, 25 Jan 2018 21:42:12 +0000</pubDate>
      
      <guid>/homelab/posts/nsd-unbound/</guid>
      <description>Set up the unbound/nsd-control
local-unbound-setup nsd-control-setup  Enable NSD and Unbound to start in /etc/rc.conf
sysrc nsd_enable=&amp;quot;YES&amp;quot; sysrc local_unbound_enable=&amp;quot;YES&amp;quot;  Set a different listening port for NSD in /usr/local/etc/nsd.conf
server: port: 5353  Create an inital zone file /usr/local/etc/nsd/home.lan.zone
$ORIGIN home.lan. ; $TTL 86400 ; @ IN SOA ns1.home.lan. admin.home.lan. ( 2017080619 ; 28800 ; 7200 ; 864000 ; 86400 ; ) NS ns1.home.lan. ns1 IN A 192.168.1.15 jail IN A 192.</description>
    </item>
    
    <item>
      <title>Compiling NGINX with ChaCha20 support</title>
      <link>/homelab/posts/nginx-chacha20/</link>
      <pubDate>Thu, 25 Jan 2018 21:31:44 +0000</pubDate>
      
      <guid>/homelab/posts/nginx-chacha20/</guid>
      <description>Make a working directory
mkdir ~/nginx cd ~/nginx  Install some dependencies
pkg install -y ca_root_nss pcre perl5  Pull the source files
fetch https://nginx.org/download/nginx-1.13.0.tar.gz fetch https://www.openssl.org/source/openssl-1.1.0e.tar.gz  Extract the tarballs
tar -xzvf nginx-1.13.0.tar.gz tar -xzvf openssl-1.1.0e.tar.gz rm *.tar.gz  Compile openssl
cd ~/nginx/openssl-1.1.0e.tar.gz ./config make make install  The compiled OpenSSL binary should be located in /usr/local/bin by default, unless the prefixdir variable has been set
/usr/local/bin/openssl version # Should output OpenSSL 1.</description>
    </item>
    
    <item>
      <title>Bhyve VM Creation</title>
      <link>/homelab/posts/bhyve-creation/</link>
      <pubDate>Thu, 25 Jan 2018 21:14:11 +0000</pubDate>
      
      <guid>/homelab/posts/bhyve-creation/</guid>
      <description>Bhyve Initial Setup Enable the tap interface in /etc/sysctl.conf and load it on the currently running system
net.link.tap.up_on_open=1 sysctl -f /etc/sysctl.conf  Enable bhyve, serial console and bridge/tap interface kernel modules in /boot/loader.conf. Reboot to apply changes or use kldload.
vmm_load=&amp;quot;YES&amp;quot; nmdm_load=&amp;quot;YES&amp;quot; if_bridge_load=&amp;quot;YES&amp;quot; if_tap_load=&amp;quot;YES&amp;quot;  Set up the network interfaces in /etc/rc.conf
cloned_interfaces=&amp;quot;bridge0 tap0&amp;quot; ifconfig_bridge0=&amp;quot;addm re0 addm tap0&amp;quot;  Create a ZFS volume
zfs create -V16G -o volmode=dev zroot/testvm  Download the installation image</description>
    </item>
    
    <item>
      <title>FreeBSD Jail Creation</title>
      <link>/homelab/posts/jail-creation/</link>
      <pubDate>Thu, 25 Jan 2018 21:01:11 +0000</pubDate>
      
      <guid>/homelab/posts/jail-creation/</guid>
      <description>Create a template dataset
zfs create -o mountpoint=/usr/local/jails zroot/jails zfs create -p zroot/jails/template  Download the base files into a new directory
mkdir ~/jails fetch ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/11.1-RELEASE/base.txz -o ~/jails  Extract the base files into the template directory (mountpoint)
tar -xf ~/jails/base.txz -C /usr/local/jails/template  Copy the resolv.conf file from host to template so that we have working DNS resolution
cp /etc/resolv.conf /usr/local/jails/template/etc/resolv.conf  When finished, take a snapshot. Anything after the &amp;lsquo;@&amp;rsquo; symbol is the snapshot name.</description>
    </item>
    
    <item>
      <title>Hardware</title>
      <link>/homelab/posts/hardware/</link>
      <pubDate>Tue, 23 Jan 2018 22:51:29 +0000</pubDate>
      
      <guid>/homelab/posts/hardware/</guid>
      <description>Virtualisation Host Gigabyte Brix Pro GB-BXI7-4770R
 Intel Core i7-4770R (quad core 3.2GHz) 16GB RAM 250GB mSATA SSD 250GB 2.5 inch SSD  NAS HP ProLiant G8 Microserver G1610T
 Intel Celeron G1610T (dual core 2.3 GHz) 16GB RAM 2 x 250GB SSD 2 x 3TB HDD  Management Raspberry Pi 2 Model B - Quad core 1GB RAM - 8GB MicroSD (w/ NOOBS)</description>
    </item>
    
  </channel>
</rss>